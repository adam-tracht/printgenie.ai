// components/MainAppFlow.js
import React, { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/router';
import DalleIntegration from './DalleIntegration';
import ProductSelection from './ProductSelection';
import CheckoutButton from './CheckoutButton';

const Hero = () => (
  <div className="text-center mb-8">
    <h1 className="text-2xl font-extrabold text-white mb-4">
      Create one-of-a-kind artwork printed on your choice of canvas.
    </h1>
    <p className="md:text-lg text-gray-300 max-w-3xl mx-auto mb-6">
      Elevate your space with artwork uniquely generated by leading edge AI image generation software and printed on demand.
    </p>
  </div>
);

const MainAppFlow = () => {
  const [generatedImage, setGeneratedImage] = useState(null);
  const [generatedImageId, setGeneratedImageId] = useState(null);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [selectedVariant, setSelectedVariant] = useState(null);
  const [mockupImage, setMockupImage] = useState(null);
  const [isGeneratingMockup, setIsGeneratingMockup] = useState(false);
  const [feedbackMessage, setFeedbackMessage] = useState('');
  const [isImageConfirmed, setIsImageConfirmed] = useState(false);

  const step2Ref = useRef(null);
  const step3Ref = useRef(null);
  const router = useRouter();

  useEffect(() => {
    const { imageId } = router.query;
    if (imageId) {
      fetchImage(imageId);
    }
  }, [router.query]);

  const fetchImage = async (imageId) => {
    try {
      const response = await fetch(`/api/images/${imageId}`);
      if (!response.ok) {
        throw new Error('Failed to fetch image');
      }
      const data = await response.json();
      if (data.success && data.data) {
        setGeneratedImage(data.data.url);
        setGeneratedImageId(data.data._id);
        setIsImageConfirmed(true);
      } else {
        throw new Error('Invalid image data');
      }
    } catch (error) {
      console.error('Error fetching image:', error);
      clearImageState();
    }
  };

  const clearImageState = () => {
    setGeneratedImage(null);
    setGeneratedImageId(null);
    setIsImageConfirmed(false);
    setSelectedProduct(null);
    setSelectedVariant(null);
    setMockupImage(null);
    router.push('/', undefined, { shallow: true });
  };

  const handleImageGenerated = (imageUrl, imageId) => {
    console.log('Image generated:', imageUrl, imageId);
    setGeneratedImage(imageUrl);
    setGeneratedImageId(imageId);
    setSelectedProduct(null);
    setSelectedVariant(null);
    setMockupImage(null);
    setIsImageConfirmed(false);
  };

  const handleImageConfirmed = (imageId) => {
    setIsImageConfirmed(true);
    router.push(`/?imageId=${imageId}`, undefined, { shallow: true });
    if (step2Ref.current) {
      step2Ref.current.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleImageReset = () => {
    clearImageState();
  };

  const handleProductSelected = (product) => {
    console.log("Product selected in MainAppFlow:", product);
    setSelectedProduct(product);
  };

  const handleVariantSelected = (variant) => {
    console.log("Variant selected in MainAppFlow:", variant);
    setSelectedVariant(variant);
  };

  const handleMockupGenerated = (mockupUrl) => {
    console.log("Mockup generated in MainAppFlow:", mockupUrl);
    setMockupImage(mockupUrl);
    setIsGeneratingMockup(false);
    if (step3Ref.current) {
      step3Ref.current.scrollIntoView({ behavior: 'smooth' });
    }
  };

  // Helper function to format price
  const formatPrice = (price) => {
    if (typeof price === 'number') {
      return price.toFixed(2);
    } else if (typeof price === 'string') {
      return parseFloat(price).toFixed(2);
    }
    return 'N/A';
  };

  return (
    <div className="max-w-6xl mx-auto p-6 bg-gray-800 rounded-lg shadow-xl">
      <Hero />

      {/* Step 1: Create Artwork */}
      <section className="mb-12">
        <DalleIntegration 
          onImageGenerated={handleImageGenerated} 
          onImageConfirmed={handleImageConfirmed}
          initialImage={generatedImage}
          onImageReset={handleImageReset}
        />
      </section>

      {/* Step 2: Select Product */}
      <section ref={step2Ref} className={`mb-12 ${!isImageConfirmed ? 'opacity-50 pointer-events-none' : ''}`}>
        {!isImageConfirmed && (
          <p className="text-gray-300 mb-4">Please generate and confirm your artwork to select a canvas.</p>
        )}
        <ProductSelection 
          image={generatedImage}
          imageId={generatedImageId}
          onProductSelected={handleProductSelected}
          onVariantSelected={handleVariantSelected}
          selectedProduct={selectedProduct}
          onMockupGenerated={handleMockupGenerated}
          isGeneratingMockup={isGeneratingMockup}
          setIsGeneratingMockup={setIsGeneratingMockup}
          hideHeaders={true}
          isEnabled={isImageConfirmed}
        />
      </section>

      {/* Step 3: Preview and Checkout */}
      <section ref={step3Ref} className={`mb-12 ${!selectedProduct || !selectedVariant ? 'opacity-50 pointer-events-none' : ''}`}>
        <h2 className="text-2xl font-bold text-white mb-4">Step 3: Preview and Checkout</h2>
        {(!selectedProduct || !selectedVariant) && (
          <p className="text-gray-300 mb-4">Please select a product and variant in Step 2 to checkout.</p>
        )}
        {selectedProduct && selectedVariant && (
          <div className="text-center">
            {mockupImage ? (
              <img src={mockupImage} alt="Product Mockup" className="w-64 h-64 mx-auto mb-4 rounded-lg shadow-lg" />
            ) : (
              <div className="w-64 h-64 mx-auto mb-4 bg-gray-700 rounded-lg flex items-center justify-center">
                <p className="text-white">Mockup not available</p>
              </div>
            )}
            <p className="text-lg text-gray-300 mb-4">Product: {selectedProduct.title}</p>
            <p className="text-lg text-gray-300 mb-4">Variant: {selectedVariant.name}</p>
            <p className="text-xl text-white mb-6">Price: ${formatPrice(selectedVariant.sellingPrice)}</p>
            {feedbackMessage && <p className="text-yellow-500 mb-4">{feedbackMessage}</p>}
            <CheckoutButton 
              product={{
                id: selectedProduct.id,
                name: `${selectedProduct.title} - ${selectedVariant.name}`,
              }}
              variant={{
                id: selectedVariant.id,
                name: selectedVariant.name,
                price: selectedVariant.sellingPrice
              }}
              imageUrl={mockupImage}
              isMockupGenerated={!!mockupImage}
              setFeedbackMessage={setFeedbackMessage}
            />
          </div>
        )}
      </section>
    </div>
  );
};

export default MainAppFlow;